using System;

namespace ProjectEuler.Problems
{
    public class Problem045 : Problem<int>
    {
        // Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:

        // Triangle Tn = n(n + 1) / 2	 	1, 3, 6, 10, 15, ...
        // Pentagonal Pn = n(3n−1) / 2	 	1, 5, 12, 22, 35, ...
        // Hexagonal Hn = n(2n−1)	 	1, 6, 15, 28, 45, ...
        // It can be verified that T285 = P165 = H143 = 40755.
        // Find the next triangle number that is also pentagonal and hexagonal.

        public override int Run()
        {
            // n(n + 1) / 2 = m(2m - 1) if n = 2m - 1
            // means hexagonal numbers is a subset of triangle numbers

            for (int i = 144; i < int.MaxValue; i++)
            {
                var result = i * (2 * i - 1);

                if (IsPentagonal(result))
                {
                    return result;
                }
            }

            return 0;
        }

        private static bool IsPentagonal(int number)
        {
            // https://en.wikipedia.org/wiki/Pentagonal_number

            var n = (Math.Sqrt(24.0 * number + 1) + 1) / 6;

            // ReSharper disable once CompareOfFloatsByEqualityOperator
            return n == (int)n;
        }
    }
}